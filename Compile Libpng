Note this setup below is optimized for gcc 4.9 or later configured with plugin support.

Prior to compiling these libraries we must define where Libfxcg is stored on your computer. To do this set the LIBFXCG_PATH environment variable. The command you need to run will look something like the following:
export LIBFXCG_PATH=$HOME/Documents/libfxcg

To compile Libpng Zlib must first be compiled
Before running make you must configure Zlib to use the sh3eb-elf compiler. To do that run:
CC=sh3eb-elf-gcc RANLIB=~/casio-gcc/bin/sh3eb-elf-gcc-ranlib NM=~/casio-gcc/bin/sh3eb-elf-gcc-nm AR=~/casio-gcc/bin/sh3eb-elf-gcc-ar CFLAGS="-m4a-nofpu -mb -O2 -flto -fuse-linker-plugin -mhitachi -Wall -L$LIBFXCG_PATH/lib -nostartfiles -T$LIBFXCG_PATH/toolchain/prizm.x -Wl,-static -Wl,-gc-sections -I$LIBFXCG_PATH/include -DNO_GZCOMPRESS -DNO_GZIP" LDFLAGS="-L$LIBFXCG_PATH/lib -nostartfiles -T$LIBFXCG_PATH/toolchain/prizm.x -Wl,-static -Wl,-gc-sections -Wl,-O2 -O2 -flto -fuse-linker-plugin -DNO_GZCOMPRESS -DNO_GZIP"  ./configure --static

Also you may be thinking to yourself that CFLAGS contain flags that should be in LDFLAGS. The reason these flags are in CFLAGS is due to the fact the ./configure script has a minor design flaw and does not take into account LDFLAGS when doing its test.

Now that you have setup Zlib you can now compile it using make so simply type make and you are done it will compile without any errors.

Now you must configure Libpng. To do so run:
RANLIB=~/casio-gcc/bin/sh3eb-elf-gcc-ranlib NM=~/casio-gcc/bin/sh3eb-elf-gcc-nm AR=~/casio-gcc/bin/sh3eb-elf-gcc-ar ./configure --host=sh3eb-elf --build=x86_64-unknown-linux-gnu CPPFLAGS="-DPNG_NO_FLOATING_ARITHMETIC -DPNG_NO_WRITE_SUPPORTED -DPNG_SETJMP_NOT_SUPPORTED -DPNG_WRITE_TRANSFORMS_NOT_SUPPORTED -DPNG_WRITE_ANCILLARY_CHUNKS_NOT_SUPPORTED -DPNG_NO_SAVE_UNKNOWN_CHUNKS -DPNG_NO_FLOATING_POINT -DPNG_NO_USER_MEM_SUPPORTED -DPNG_NO_TIME_RFC1123 -DPNG_NO_IO_STATE_SUPPORTED -DPNG_NO_USER_LIMITS_SUPPORTED -I$LIBFXCG_PATH/include -I$LIBFXCG_PATH/examples/zlib-1.2.11/" CFLAGS="-m4a-nofpu -mb -O2 -flto -fuse-linker-plugin -mhitachi -Wall -I$LIBFXCG_PATH/include -I$LIBFXCG_PATH/examples/zlib-1.2.11/" LDFLAGS="-L$LIBFXCG_PATH/lib -L$LIBFXCG_PATH/examples/zlib-1.2.11/ -nostartfiles -T$LIBFXCG_PATH/toolchain/prizm.x -Wl,-static -Wl,-gc-sections -Wl,-O2 -O2 -flto -fuse-linker-plugin" --with-gnu-ld

Again run make to compile Libpng. This is the last step besides using the compiled libraries.

Note that make may stop with an error. This may be fine if the library is already built it may just be trying to build some examples.
If you check in the folder named .libs and see libpng16.a you are done. If not that means the error matters and needs to be addressed.
